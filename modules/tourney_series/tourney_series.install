<?php

/**
 * @file
 * Install, update and uninstall functions for tournaments.
 */

/**
 * Implements hook_schema().
 */
function tourney_series_schema() {
  $schema['tourney_series'] = array(
    'description' => 'The base table for tournament series.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a tournament series.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'type' => array(
        'description' => 'The bundle.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => ''
      ),
      'title' => array(
        'description' => 'The title of the tournament series, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'format' => array(
        'description' => 'The format plugin of the tournament series.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
    ),
    'primary key' => array('id'),
  );

  // Defing the bundle schemas for all three entities
  $schema['tourney_series_type'] = array(
    'description' => 'Stores information about all defined types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique type ID.',
      ),
      'name' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this type in relation to others.',
      ),
      'locked' => array(
        'description' => 'A boolean indicating whether the administrator may delete this type.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this type.',
        'merge' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function tourney_series_install() {
  $relation = new stdClass();
  $relation->relation_type = 'has_tournament';
  $relation->label = 'has tournament';
  $relation->reverse_label = 'is tournament of';
  $relation->directional = TRUE;
  $relation->source_bundles['tourney_series:*'] = 'tourney_series:*';
  $relation->target_bundles['tourney_tournaments:*'] = 'tourney_tournaments:*';
  relation_type_save($relation);

  $type = entity_create('tourney_series_type', array(
    'name' => 'series',
    'label' => st('Series'),
    'weight' => 0,
  ));
  $type->save();
}

/**
 * Implements hook_uninstall().
 */
function tourney_series_uninstall() {
  relation_type_delete('has_tournament');
}