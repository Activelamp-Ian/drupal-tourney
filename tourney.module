<?php
/**
 * @file
 * Create tournament, match, and game entities for creating tournaments.
 */

define('TOURNEY_CONTESTANT_1', 'contestant_1');
define('TOURNEY_CONTESTANT_1_LABEL', 'contestant 1');
define('TOURNEY_CONTESTANT_2', 'contestant_2');
define('TOURNEY_CONTESTANT_2_LABEL', 'contestant 2');
define('TOURNEY_GAMES', 5);
define('TOURNEY_DEBUG_EXTENDS', variable_get('tourney_debug', FALSE));

/**
 * Implements hook_menu().
 */
function tourney_menu() {
  $items = array();
  $items['tourney/add'] = array(
    'title' => 'Add a new tournament',
    'page callback' => 'entity_ui_get_form',
    'page arguments' => array('tourney_tournament', NULL, 'add'),
    'access arguments' => array('create tourney'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/tourney.tournament.inc',
  );
  $items['tourney/%tourney_tournament'] = array(
    'title callback' => 'tourney_page_title',
    'title arguments' => array(1),
    'page callback' => 'tourney_tournament_page_view',
    'page arguments' => array(1),
    'access arguments' => array('access tourney'),
    'file' => 'includes/tourney.tournament.inc',
  );
  $items['tourney/%tourney_tournament/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['tourney/%tourney_tournament/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'tourney_tournament_edit',
    'page arguments' => array(1),
    'access arguments' => array('edit tourney'),
    'file' => 'includes/tourney.tournament.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['tourney/%tourney_tournament/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'tourney_confirm_delete_page',
    'page arguments' => array(1),
    'access arguments' => array('delete tourney'),
    'file' => 'includes/tourney.admin.inc',
    'weight' => 10,
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['tourney/match/%tourney_match'] = array(
    'title callback' => 'tourney_page_title',
    'title arguments' => array(2),
    'page callback' => 'tourney_match_page_view',
    'page arguments' => array(2),
    'access arguments' => array('access tourney'),
    'file' => 'includes/tourney.match.inc',
  );
  $items['tourney/match/%tourney_match/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['tourney/match/%tourney_match/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'tourney_match_edit',
    'page arguments' => array(2),
    'access arguments' => array('edit tourney'),
    'file' => 'includes/tourney.match.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['tourney/game/%tourney_game'] = array(
    'title callback' => 'tourney_page_title',
    'title arguments' => array(2),
    'page callback' => 'tourney_game_page_view',
    'page arguments' => array(2),
    'access arguments' => array('access tourney'),
    'file' => 'includes/tourney.match.inc',
  );
  $items['tourney/game/%tourney_game/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['tourney/game/%tourney_game/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'tourney_game_edit',
    'page arguments' => array(2),
    'access arguments' => array('edit tourney'),
    'file' => 'includes/tourney.match.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/tourney'] = array(
    'title' => 'Manage Tourney Entities',
    'page callback' => 'tourney_overview_entities',
    'access arguments' => array('administer tourney'),
    'description' => 'Manage Tournament entities.',
    'file' => 'includes/tourney.tournament.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/content/tourney'] = array(
    'title' => 'Tournaments',
    'page callback' => 'tourney_admin_content',
    'access arguments' => array('administer tourney'),
    'description' => 'View all the tournaments on your site.',
    'file' => 'includes/tourney.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  // Config
  $items['admin/config/tourney'] = array(
    'title' => 'Tourney',
    'description' => 'Configure Tournament module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tourney_configuration'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/tourney.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function tourney_admin_paths() {
  if (variable_get('node_admin_theme')) {
    return array(
      'tourney/*/edit' => TRUE,
      'tourney/*/*/edit' => TRUE,
      'tourney/add' => TRUE,
    );
  }
}

/**
 * Implements hook_permission().
 */
function tourney_permission() {
  return array(
    'administer tourney' =>  array(
      'title' => t('Administer Tournaments'),
      'description' => t('Create, edit, delete, and perform administration for tournaments.'),
    ),
    'create tourney' =>  array(
      'title' => t('Create Tournaments'),
      'description' => t('Create new tournaments.'),
    ),
    'edit tourney' =>  array(
      'title' => t('Edit Tournaments'),
      'description' => t('Edit any tournaments.'),
    ),
    'delete tourney' =>  array(
      'title' => t('Delete Tournaments'),
      'description' => t('Delete any tournaments.'),
    ),
    'access tourney' =>  array(
      'title' => t('View Tournaments'),
      'description' => t('View any tournament.'),
    ),
  );
}

/**
 * Menu title callback.
 */
function tourney_page_title($tourney) {
  return ucfirst($tourney->label());
}

/**
 * Implements hook_entity_info().
 */
function tourney_entity_info() {
  $return = array();
  $entities = tourney_entities();
  foreach ($entities as $entity_name => $bundle) {
    // Entity name minus the tourney_ prefix
    $entity_short = substr($entity_name, 8);
    
    $entity_class = 'Entity';
    $entity_class = ($entity_short == 'tournament') ? 'TourneyTournament' : $entity_class;
    $entity_class = ($entity_short == 'match') ? 'TourneyMatch' : $entity_class;
    $entity_class = ($entity_short == 'game') ? 'TourneyGame' : $entity_class;

    $return[$entity_name] = array(
      'label' => $entity_name,
      'entity class' => $entity_class,
      'controller class' => 'EntityAPIController',
      'base table' => $entity_name,
      'fieldable' => TRUE,
      'uri callback' => 'tourney_uri',
      'static cache' => TRUE,
      'translation' => array(
        'locale' => TRUE,
      ),
      'entity keys' => array(
        'id' => 'id',
        'bundle' => 'type',
        'label' => 'title',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'name',
      ),
      'access callback' => 'tourney_access',
      'module' => 'tourney',
    );

    // Add bundle info but bypass entity_load() as we cannot use it here.
    $types = db_select($entity_name . '_type', 'ttp')
      ->fields('ttp')
      ->execute()
      ->fetchAllAssoc('name');

    foreach ($types as $type => $info) {
      $return[$entity_name]['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
          'path' => 'admin/structure/tourney/' . $entity_short . '/manage/%' . $entity_name . '_type',
          'real path' => 'admin/structure/tourney/' . $entity_short . '/manage/' . $type,
          'bundle argument' => 5,
          'access arguments' => array('access content'),
        ),
      );
    }

    $return[$entity_name . '_type'] = array(
      'label' => t('@entity type', array('@entity' => ucfirst($entity_short))),
      'plural label' => t('@entity types', array('@entity' => ucfirst($entity_short))),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => $entity_name . '_type',
      'fieldable' => FALSE,
      'bundle of' => $entity_name,
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'name' => 'name',
        'label' => 'label',
      ),
      'access callback' => 'tourney_access',
      'module' => 'tourney',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/tourney/' . $entity_short,
        'file' => 'includes/tourney.admin.inc',
      ),
    );
  }

  return $return;
}

/**
 * Implements hook_forms().
 */
function tourney_forms($form_id, $args) {
  foreach (tourney_entities() as $entity_name => $bundle) {
    $forms[$entity_name . '_type_form'] = array(
      'callback' => 'tourney_type_form',
    );
  }
  return $forms;
}

/**
 * Implements hook_field_extra_fields().
 */
function tourney_field_extra_fields() {
  $extra['tourney_tournament']['tournament'] = array(
    'form' => array(
      'format' => array(
        'label' => t('Tournament Format'),
        'description' => t('The format of the tournament'),
        'weight' => 0,
      ),
      'winner' => array(
        'label' => t('Tournament Winner'),
        'description' => t('The winner of the tournament'),
        'weight' => 0,
      ),
      'players' => array(
        'label' => t('Tournament Players'),
        'description' => t('The number of players in the tournament'),
        'weight' => 0,
      ),
      'matches' => array(
        'label' => t('Tournament Matches'),
        'description' => t('A rendered bracket of matches in tournament'),
        'weight' => 1,
      ),
    ),
    'display' => array(
      'tourney_format' => array(
        'label' => t('Tournament Format'),
        'description' => t('The format of the tournament'),
        'weight' => 0,
      ),
      'tourney_winner' => array(
        'label' => t('Tournament Winner'),
        'description' => t('The winner of the tournament'),
        'weight' => 0,
      ),
      'tourney_players' => array(
        'label' => t('Tournament Players'),
        'description' => t('The number of players in the tournament'),
        'weight' => 0,
      ),
      'matches' => array(
        'label' => t('Tournament Matches'),
        'description' => t('A rendered bracket of matches in tournament'),
        'weight' => 1,
      ),
    ),
  );

  $extra['tourney_match']['match'] = array(
    'form' => array(
      'winner' => array(
        'label' => t('Match Winner'),
        'description' => t('The winner of the match'),
        'weight' => 0,
      ),
      'contestant1' => array(
        'label' => t('Contestant 1'),
        'description' => t('The first contestant of the match'),
        'weight' => 1,
      ),
      'contestant2' => array(
        'label' => t('Contestant 2'),
        'description' => t('The second contestant of the match'),
        'weight' => 2,
      ),
    ),
    'display' => array(
      'tournament' => array(
        'label' => t('Tournament Link'),
        'description' => t('A link to the tournament this match is in'),
        'weight' => -10,
      ),
      'match_winner' => array(
        'label' => t('Match Winner'),
        'description' => t('The winner of the match'),
        'weight' => 0,
      ),
      'match_contestant1' => array(
        'label' => t('Contestant 1'),
        'description' => t('The first contestant of the match'),
        'weight' => 1,
      ),
      'match_contestant2' => array(
        'label' => t('Contestant 2'),
        'description' => t('The second contestant of the match'),
        'weight' => 2,
      ),
      'match_table' => array(
        'label' => t('Match Table'),
        'description' => t('Rendered display of games in the match'),
        'weight' => 0,
      ),
    ),
  );

  $extra['tourney_game']['game'] = array(
    'form' => array(
      'winner' => array(
        'label' => t('Game Winner'),
        'description' => t('The winner of the game'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'game_winner' => array(
        'label' => t('Game Winner'),
        'description' => t('The winner of the game'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Implements hook_theme().
 */
function tourney_theme($existing, $type, $theme, $path) {
  return array(
    'tourney_render_match' => array(
      'variables' => array('match' => NULL),
      'file' => 'match.inc',
      'path' => $path . '/theme',
    ),
    'tourney_admin_content' => array(
      'variables' => array('tournaments' => NULL),
      'file' => 'includes/tourney.admin.inc',
    ),
    'tourney_render_tourney' => array(
      'variables' => array('tournament' => NULL),
      'file' => 'tourney.inc',
      'path' => $path . '/theme',
    ),
    'tourney_matchblock' => array(
      'variables' => array('match' => NULL, 'flow' => FALSE, 'small' => 0),
      'file' => 'tourney.inc',
      'path' => $path . '/theme',
    ),
    'tourney_spacer' => array(
      'variables' => array('height' => 1, 'flow' => FALSE, 'small' => TRUE, 'y' => 1),
      'file' => 'tourney.inc',
      'path' => $path . '/theme',
    ),
    'tourney_flow_control' => array(
      'variables' => array('flows' => ''),
      'file' => 'tourney.inc',
      'path' => $path . '/theme',
    ),
    'tourney_match_fix' => array(
      'render element' => 'element',
      'file' => 'tourney.inc',
      'path' => $path . '/theme',
    ),

    //single
    'tourney_render_tourney_single' => array(
      'variables' => array('tournament' => NULL, 'matches' => NULL),
      'file' => 'single.inc', 
      'path' => $path . '/theme/type/',
    ),
    'tourney_single_tree' => array(
      'variables' => array('rounds' => NULL, 'small' => FALSE),
      'file' => 'single.inc', 
      'path' => $path . '/theme/type/',
    ),

    //double
    'tourney_render_tourney_double' => array(
      'variables' => array('tournament' => NULL, 'matches' => NULL),
      'file' => 'double.inc', 
      'path' => $path . '/theme/type/',
    ),
    'tourney_dummy_rounds' => array(
      'variables' => array('count' => NULL, 'height' => NULL, 'small' => 1),
      'file' => 'double.inc', 
      'path' => $path . '/theme/type/',
    ),
    'tourney_double_top_bracket' => array(
      'variables' => array('rounds' => NULL),
      'file' => 'double.inc', 
      'path' => $path . '/theme/type/',
    ),
    'tourney_double_bottom_bracket' => array(
      'variables' => array('rounds' => NULL),
      'file' => 'double.inc', 
      'path' => $path . '/theme/type/',
    ),
    'tourney_double_champion_bracket' => array(
      'variables' => array('tournament' => NULL, 'rounds' => NULL),
      'file' => 'double.inc', 
      'path' => $path . '/theme/type/',
    ),

    //round robin
    'tourney_render_tourney_roundrobin' => array(
      'variables' => array('tournament' => NULL, 'matches' => NULL),
      'file' => 'roundrobin.inc', 
      'path' => $path . '/theme/type/',
    ),
    'tourney_roundrobin_standings' => array(
      'variables' => array('tournament' => NULL, 'matches' => NULL),
      'file' => 'roundrobin.inc', 
      'path' => $path . '/theme/type/',
    ),
  );
}

/**
 * Defines the entities and their  default bundles for the entities created by
 * this module.
 */
function tourney_entities() {
  $types = &drupal_static(__FUNCTION__);

  if (empty($types)) {
    $types['tourney_tournament'] = (object) array(
      'type' => 'tournament',
      'name' => t('Tournament'),
      'description' => t('A tournament entity.'),
    );
    $types['tourney_match'] = (object) array(
      'type' => 'match',
      'name' => t('Match'),
      'description' => t('A match entity.'),
    );
    $types['tourney_game'] = (object) array(
      'type' => 'game',
      'name' => t('Game'),
      'description' => t('A game entity.'),
    );
  }
  return $types;
}

/**
 * What is this for?
 */
function tourney_uri($entity) {
  $path = $entity->type === 'tournament' ? 'tourney/' . $entity->id : 'tourney/' . $entity->type . '/' . $entity->id;
  return array(
    'path' => $path,
  );
}

/**
 * Menu auto loaders.
 */
function tourney_tournament_type_load($type) {
  return tourney_tournament_type_get_types($type);
}
function tourney_match_type_load($type) {
  return tourney_match_type_get_types($type);
}
function tourney_game_type_load($type) {
  return tourney_game_type_get_types($type);
}

/**
 * Wrapper functions for the default entities #machine_name existing callback.
 */
function tourney_tournament_type_get_types($type_name = NULL) {
  return tourney_entity_get_types('tourney_tournament_type', $type_name);
}
function tourney_match_type_get_types($type_name = NULL) {
  return tourney_entity_get_types('tourney_match_type', $type_name);
}
function tourney_game_type_get_types($type_name = NULL) {
  return tourney_entity_get_types('tourney_game_type', $type_name);
}

/**
 * Gets an array of all types, keyed by the type name.
 *
 * @param $entity_name
 *   The name of the entity to look at.
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return
 *   Depending whether $type isset, an array of types or a single one.
 */
function tourney_entity_get_types($entity_name, $type_name = NULL) {
  $types = entity_load_multiple_by_name($entity_name, isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Access callback for tourney module.
 */
function tourney_access() {
  return TRUE;
}

/**
 * Fetch a tournament object
 *
 * @param $id
 *   Integer specifying the tournament id
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded object of FALSE of it cannot be loaded.
 *
 * @see tourney_tournament_load_multiple()
 */
function tourney_tournament_load($id = NULL, $reset = FALSE) {
  $ids = isset($id) ? array($id) : array();
  $conditions = array();
  $tournament = tourney_tournament_load_multiple($ids, $conditions, $reset);

  return $tournament ? reset($tournament) : FALSE;
}

/**
 * Load multiple tournament entities based on certain conditions.
 *
 * @param $ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of tournament entity objects, indexed by id.
 */
function tourney_tournament_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tourney_tournament', $ids, $conditions, $reset);
}

/**
 * Fetch a match object
 *
 * @param $id
 *   Integer specifying the match id
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded object or FALSE of it cannot be loaded.
 *
 * @see tourney_match_load_multiple()
 */
function tourney_match_load($id = NULL, $reset = FALSE) {
  $ids = isset($id) ? array($id) : array();
  $conditions = array();
  $match = tourney_match_load_multiple($ids, $conditions, $reset);
  return $match ? reset($match) : FALSE;
}

/**
 * Load multiple match entities based on certain conditions.
 *
 * @param $ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of match entity objects, indexed by id.
 */
function tourney_match_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tourney_match', $ids, $conditions, $reset);
}

/**
 * Fetch a game object
 *
 * @param $id
 *   Integer specifying the match id
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded object or FALSE of it cannot be loaded.
 *
 * @see tourney_match_load_multiple()
 */
function tourney_game_load($id = NULL, $reset = FALSE) {
  $ids = isset($id) ? array($id) : array();
  $conditions = array();
  $match = tourney_game_load_multiple($ids, $conditions, $reset);

  return $match ? reset($match) : FALSE;
}

/**
 * Load multiple game entities based on certain conditions.
 *
 * @param $ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of match entity objects, indexed by id.
 */
function tourney_game_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tourney_game', $ids, $conditions, $reset);
}


/**
 * Implements hook_entity_insert().
 */
function tourney_entity_insert($entity, $type) {
  $info = entity_get_info($type);

  if ($type == 'tourney_tournament') {
    // Build a nested array of matches for the tournament being saved.
    $matches = new TourneyFactory($entity->players, $entity->format);
    $matches->create();
    // Create the actual match entities and the first game.
    $matches_created = $matches->save($entity);
    // Update the tournament with the number of matches created
    $entity->matches_created = $matches_created;
    drupal_write_record('tourney_tournament', $entity, 'id');
  }

  if (is_subclass_of($entity, 'TourneyEntity')) {
    tourney_update_alias($entity, 'insert');
  }
}

/**
 * Implements hook_entity_update().
 */
function tourney_entity_update($entity, $type) {
  $info = entity_get_info($type);
  if (is_subclass_of($entity, 'TourneyEntity')) {
    tourney_update_alias($entity, 'update');
  }
}

/**
 * Implements hook_entity_delete().
 */
function tourney_entity_delete($entity, $type) {
  // Remove the pathauto aliases for all our defined entities.
  if (module_exists('pathauto') && is_subclass_of($entity, 'TourneyEntity')) {
    $uri = tourney_uri($entity);
    pathauto_entity_path_delete_all($type, $entity, $uri);
  }
}

/**
 * Save a tournament entity.
 */
function tourney_tournament_save(&$tourney) {
  entity_save('tourney_tournament', $tourney);
}

/**
 * Save a match entity.
 */
function tourney_match_save(&$match) {
  entity_save('tourney_match', $match);
  

}

/**
 * Save a game entity.
 */
function tourney_game_save(&$game) {
  entity_save('tourney_game', $game);
  if (isset($game->match) && is_object($game->match)) {
    cache_clear_all('tourney_winner_count_' . $game->match->id, 'cache_tourney');
    cache_clear_all('tourney_match_games_' . $game->match->id, 'cache_tourney', TRUE);
    cache_clear_all('tourney_build_matches_' . $game->match->getTournament()->id, 'cache_tourney', TRUE);
  }
}

/**
 * Reports the winner of a tournament.
 *
 */
function tourney_tournament_calc_winner($tournaments, &$winners = array()) {
  if (is_array($tournaments)) {
    foreach ($tournaments as $tournament) {
      tourney_tournament_calc_winner($tournament, $winners);
    }
    return $winners;
  }
  elseif (!isset($tournaments) || (!is_int($tournaments) && !is_object($tournaments))) {
    throw new Exception(t('Required parameter is missing or invalid'));
  }
  $tournament = is_int($tournaments) ? tourney_tournament_load($tournaments) : $tournaments;
  $finished = tourney_tournament_count_finished($tournament);
  $id = $tournament->id;

  if ($tournament->matches_created == $finished[$id]) {
    // Load plugin to determine winner.
    if (!class_exists($match_style = $tournament->format)) {
      throw new Exception(t('No such claass'));
    }
    $interfaces = class_implements($match_style);
    if (!isset($interfaces['TourneyFactoryInterface'])) {
      throw new Exception(t('Wrong implementation.'));
    }

    $tourneyPlugin = new $match_style($tournament->players);
    // May not call static method with class as variable until php5.3
    $win = $tourneyPlugin->determin_winner($tournament);
    if (is_array($win)) {
      $winners[$id] = $win[0] . '.' . $win[1];
    }
  }

  return $winners;
}

/**
 * Report how many matches have been finished in a tournament
 *
 * @todo Remove excessive error checks for production.
 *
 * @param array|object|int $tournaments
 *   Tournament entity object or tournament entity id or an array containing
 *   them (mixed, and recursive, but why would you want to?).
 *
 * @return array
 *   An array of integers describing the count of finished matches keyed by
 *   tournament entity id.
 */
function tourney_tournament_count_finished($tournaments, &$finished = array()) {
  if (is_array($tournaments)) {
    foreach ($tournaments as $tournament) {
      tourney_tournament_count_finished($tournament, $finished);
    }
    return $finished;
  }
  elseif (!isset($tournaments) || (!is_int($tournaments) && !is_object($tournaments))) {
    throw new Exception(t('Required parameter is missing or invalid'));
  }

  try {
    $tournament = is_int($tournaments) ? tourney_tournament_load($tournaments) : $tournaments;
    $matches = $tournament->buildMatches(TRUE, TRUE);
  }
  catch (Exception $e) {
    throw new Exception(t('Can not load matches for tournament') . ': ' . $e->getMessage(), 'error');
  }

  $finished[$tournament->id] = 0;
  foreach ($matches as $match) {
    $finished[$tournament->id] += (strlen($match->winner) > 0);
  }

  return $finished;
}

/**
 * Get the standings for a tournament
 *
 * @param $tournament
 *   A tournament object to get the standings for.
 * @return
 *   An associative array keyed with wins, losses, and total played games.
 */
function tourney_get_standings($tournament) {
  $matches = $tournament->buildMatches(TRUE);
  // Get the wins for each match

  $standings = array();
  $i = 0;

  foreach ($matches as $match) {
    if ( $match->getWinner() == '' ) continue;
    $c1 = $match->getContestant(1)->eid;
    $c2 = $match->getContestant(2)->eid;
    if ( !array_key_exists($c1, $standings) )
      $standings[$c1] = array('wins' => 0, 'losses' => 0, 'total' => 0, 'first' => -1);
    if ( !array_key_exists($c2, $standings) )
      $standings[$c2] = array('wins' => 0, 'losses' => 0, 'total' => 0, 'first' => -1);
    if ( $match->winner == $c1 ) {
      $standings[$c1]['wins']++;
      $standings[$c2]['losses']++;
      if ( $standings[$c1]['first'] == -1 ) $standings[$c1]['first'] = $i++;
    }
    else {
      $standings[$c2]['wins']++;
      $standings[$c1]['losses']++;
      if ( $standings[$c2]['first'] == -1 ) $standings[$c2]['first'] = $i++;
    }
    $standings[$c1]['total']++;
    $standings[$c2]['total']++;
  }
  return $standings;
}

/**
 * Fetch metadata for all tournament_type plugins.
 *
 * @return
 *   An array of arrays with information about all available tournament types.
 */
function tourney_get_types() {
  ctools_include('plugins');
  return ctools_get_plugins('tourney', 'tourney_formats');
}

/**
 * Build an options array to be used in forms.
 */
function tourney_get_type_options($reset = FALSE) {
  ctools_include('plugins');
  static $options = array();

  if (!empty($options) && !$reset) {
    return $options;
  }

  $plugins = tourney_get_types();
  uasort($plugins, 'ctools_plugin_sort');
  foreach ($plugins as $info) {
    $options[$info['builder controller']] = $info['name'];
  }
  return $options;
}

/**
 * Create a relation between two entities.
 *
 * @param $predicate
 *   The relation type to save.
 * @param $source_entity
 *   The source entity.
 * @param $source_id
 *   The entity id of the source entity.
 * @param $destination_entity
 *   The destination entity.
 * @param $destination_id
 *   The entity id of the destination entity.
 */
function tourney_create_relation($predicate, $source_entity, $source_id, $destination_entity, $destination_id) {
  $entity_keys = array(
    array('entity_type' => $source_entity, 'entity_id' => $source_id),
    array('entity_type' => $destination_entity, 'entity_id' => $destination_id),
  );
  return relation_insert($predicate, $entity_keys);
}

/**
 * Implements hook_ctools_plugin_type().
 */
function tourney_ctools_plugin_type() {
  $plugins['tourney_formats'] = array(
    'load themes' => TRUE,
  );

  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function tourney_ctools_plugin_directory($module, $plugin) {
  if ($module == 'tourney' && $plugin == 'tourney_formats') {
    return 'plugins/tourney_formats';
  }
}

/**
 * Implements hook_views_api().
 */
function tourney_views_api() {
  return array(
    'api' => '3',
  );
}

/**
 * Update the URL aliases for an individual tourney entity.
 *
 * @param $entity
 *   An entity object.
 * @param $op
 *   Operation being performed ('insert', 'update' or 'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function tourney_update_alias($entity, $op, array $options = array()) {
  // Skip processing if the user has disabled pathauto for the node.
  if (!module_exists('pathauto') || isset($node->path['pathauto']) && empty($node->path['pathauto'])) {
    return;
  }

  /*
  $options += array(
    'language' => isset($node->language) ? $node->language : LANGUAGE_NONE,
  );
  */

  // Skip processing if the node has no pattern.
  //if (!pathauto_pattern_load_by_entity($entity->_entity_type, $entity->_entity_type, $options['language'])) {
  if (!pathauto_pattern_load_by_entity($entity->type, $entity->type)) {
    // Remove the alias if a pattern is no longer given.
    $uri = tourney_uri($entity);
    pathauto_entity_path_delete_all($entity->type, $entity, $uri);
    return;
  }

  module_load_include('inc', 'pathauto');
  $uri = entity_uri($entity->type, $entity);
  //pathauto_create_alias($entity_type, $op, $uri['path'], array($entity_type => $entity), $entity_type, $options['language']);
  return pathauto_create_alias($entity->type, $op, $uri['path'], array($entity->type => $entity), $entity->type);
}
/**
 * Implements hook_flush_caches().
 */
function tourney_flush_caches() {
  return array('cache_tourney');
}

/**
 * Returns a single part of a full match name 
 *
 * @param $name
 *   Full name of the match in bracket_round_match[_contestant] format
 * @param $part
 *   Which part of the name to return
 * @return $value
 *   Value of the part asked for 
 */
function tourney_get_name_part($name, $part) {
  foreach ( explode('_', $name) as $sub ) {
    $sub = explode('-', $sub);
    if ( $sub[0] == $part ) return $sub[1];
  }
}





// POSSIBLE ENTITY MODULE PATCHES:

function entity_load_by_eid($eids) {
  $entities = array();
  foreach ( $eids as $eid ) {
    $entities[$eid] = entity_load_single_by_eid($eid);
  }
  return $entities;
}

function entity_load_single_by_eid($eid) {
  @list($type, $id) = explode('.', $eid);
  return entity_load_single($type, $id);
}

/**
 * Implements hook_entity_load().
 */
function tourney_entity_load($entities, $type) {
  // Need consistent properties about the entity loaded since contestants can
  // be any entity.
  // @todo: limit this logic just to entities that are setup in the contestant
  //   relations.
  foreach ($entities as $id => $entity) {
    $entity->eid         = $type . '.' . $id;
    $entity->entity_type = $type;
    $entity->entity_id   = $id;
    $entity->entity_name = !property_exists($entity, 'title') 
      ? (property_exists($entity, 'name') ? $entity->name : 'NONAME') : $entity->title;
  }
}