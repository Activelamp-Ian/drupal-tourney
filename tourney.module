<?php

/**
 * @file
 * Create tournament, match, and game entities for creating tournaments.
 */

/**
 * Implements hook_menu().
 */
function tourney_menu() {
 
  $items['tourney/add'] = array(
    'title' => 'Add a new tournament',
    'page callback' => 'entity_ui_get_form',
    'page arguments' => array('tourney_tournament', NULL, 'add'),
    'access arguments' => array('access content'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/tourney.tournament.inc',
  );
  $items['tourney/%tourney_tournament'] = array(
    'title callback' => 'tourney_page_title',
    'title arguments' => array(1),
    'page callback' => 'tourney_tournament_page_view',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'includes/tourney.tournament.inc',
  );
  $items['tourney/%tourney_tournament/view'] = array(
    'title' => t('View'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['tourney/%tourney_tournament/edit'] = array(
    'title' => t('Edit'),
    'page callback' => 'tourney_tournament_edit',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'includes/tourney.tournament.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['tourney/match/%tourney_match'] = array(
    'title callback' => 'tourney_page_title',
    'title arguments' => array(2),
    'page callback' => 'tourney_match_page_view',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'file' => 'includes/tourney.match.inc',
  );
  $items['tourney/match/%tourney_match/view'] = array(
    'title' => t('View'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['tourney/match/%tourney_match/edit'] = array(
    'title' => t('Edit'),
    'page callback' => 'tourney_match_edit',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'file' => 'includes/tourney.match.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['tourney/game/%tourney_game'] = array(
    'title callback' => 'tourney_page_title',
    'title arguments' => array(2),
    'page callback' => 'tourney_game_page_view',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'file' => 'includes/tourney.match.inc',
  );
  $items['tourney/game/%tourney_game/view'] = array(
    'title' => t('View'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['tourney/game/%tourney_game/edit'] = array(
    'title' => t('Edit'),
    'page callback' => 'tourney_game_edit',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'file' => 'includes/tourney.match.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/tourney'] = array(
    'title' => t('Manage Tourney Entities'),
    'page callback' => 'tourney_overview_entities',
    'access arguments' => array('access content'),
    'description' => t('Manage Tournament entities.'),
    'file' => 'includes/tourney.tournament.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * Menu title callback.
 */
function tourney_page_title($tourney) {
  return drupal_ucfirst($tourney->label());
}

/**
 * Implements hook_entity_info().
 */
function tourney_entity_info() {
  $return = array();
  $entities = tourney_entities();
  foreach ($entities as $entity_name => $bundle) {
    // Entity name minus the tourney_ prefix
    $entity_short = substr($entity_name, 8);
    
    $return[$entity_name] = array(
      'label' => $entity_name,
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => $entity_name,
      'fieldable' => TRUE,
      'uri callback' => 'tourney_uri',
      'static cache' => TRUE,
      'translation' => array(
        'locale' => TRUE,
      ),
      'entity keys' => array(
        'id' => 'id',
        'bundle' => 'type',
        'label' => 'title',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'name',
      ),
      'access callback' => 'tourney_access',
      'module' => 'tourney',
    );
    
    
    // Add bundle info but bypass entity_load() as we cannot use it here.
    $types = db_select($entity_name .'_type', 'ttp')
      ->fields('ttp')
      ->execute()
      ->fetchAllAssoc('name');

    foreach ($types as $type => $info) {
      $return[$entity_name]['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
          'path' => 'admin/structure/tourney/'. $entity_short .'/manage/%'. $entity_name .'_type',
          'real path' => 'admin/structure/tourney/'. $entity_short .'/manage/'. $type,
          'bundle argument' => 5,
          'access arguments' => array('access content'),
        ),
      );
    }

    $return[$entity_name .'_type'] = array(
      'label' => t('@entity type', array('@entity' => ucfirst($entity_short))),
      'plural label' => t('@entity types', array('@entity' => ucfirst($entity_short))),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => $entity_name .'_type',
      'fieldable' => FALSE,
      'bundle of' => $entity_name,
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'name' => 'name',
        'label' => 'label',
      ),
      'access callback' => 'tourney_access',
      'module' => 'tourney',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/tourney/'. $entity_short,
        'file' => 'includes/tourney.admin.inc',
      ),
    );
  }
  
  return $return;
}

/**
 * Implements hook_forms().
 */
function tourney_forms($form_id, $args) {
  foreach (tourney_entities() as $entity_name => $bundle) {
    $forms[$entity_name .'_type_form'] = array(
      'callback' => 'tourney_type_form',
    );
  }
  return $forms;
}

/**
 * Implements hook_field_extra_fields().
 */
function tourney_field_extra_fields() {
  $extra['tourney_tournament']['tournament'] = array(
    'form' => array(
      'format' => array(
        'label' => t('Tournament Format'),
        'description' => t('The format of the tournament'),
        'weight' => 0,
      ),
      'winner' => array(
        'label' => t('Tournament Winner'),
        'description' => t('The winner of the tournament'),
        'weight' => 0,
      ),
      'players' => array(
        'label' => t('Tournament Players'),
        'description' => t('The number of players in the tournament'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'tourney_format' => array(
        'label' => t('Tournament Format'),
        'description' => t('The format of the tournament'),
        'weight' => 0,
      ),
      'tourney_winner' => array(
        'label' => t('Tournament Winner'),
        'description' => t('The winner of the tournament'),
        'weight' => 0,
      ),
      'tourney_players' => array(
        'label' => t('Tournament Players'),
        'description' => t('The number of players in the tournament'),
        'weight' => 0,
      ),
    ),
  );
  
  $extra['tourney_match']['match'] = array(
    'form' => array(
      'winner' => array(
        'label' => t('Match Winner'),
        'description' => t('The winner of the match'),
        'weight' => 0,
      ),
      'contestant1' => array(
        'label' => t('Contestant 1'),
        'description' => t('The first contestant of the match'),
        'weight' => 0,
      ),
      'contestant2' => array(
        'label' => t('Contestant 2'),
        'description' => t('The second contestant of the match'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'match_winner' => array(
        'label' => t('Match Winner'),
        'description' => t('The winner of the match'),
        'weight' => 0,
      ),
      'match_contestant1' => array(
        'label' => t('Contestant 1'),
        'description' => t('The first contestant of the match'),
        'weight' => 0,
      ),
      'match_contestant2' => array(
        'label' => t('Contestant 2'),
        'description' => t('The second contestant of the match'),
        'weight' => 0,
      ),
    ),
  );
  
  $extra['tourney_game']['game'] = array(
    'form' => array(
      'winner' => array(
        'label' => t('Game Winner'),
        'description' => t('The winner of the game'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'game_winner' => array(
        'label' => t('Game Winner'),
        'description' => t('The winner of the game'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Implements hook_theme().
 */
function tourney_theme($existing, $type, $theme, $path) {
  return array(
    'tourney_render_matches' => array(
      'variables' => array('matches' => NULL),
      'file' => 'matches.inc',
      'path' => $path .'/theme'
    ),
  );
}

/**
 * Implements hook_entity_load().
 */
function tourney_entity_load($entities, $type) {
  if ($type == 'tourney_match') {
    foreach ($entities as $entity) {
      // Get the contestants in this match.
      $contestant1 = relation_get_related_entity('tourney_match', $entity->id, 'contestant_1');
      $contestant2 = relation_get_related_entity('tourney_match', $entity->id, 'contestant_2');
      $entity->contestant1 = is_object($contestant1) ? $contestant1 : '';
      $entity->contestant2 = is_object($contestant1) ? $contestant2 : '';
      
      // Get all the games in this match.
      module_load_include('inc', 'tourney', 'includes/tourney.tournament');
      $entity->games_played = tourney_tournament_get_match_games($entity, FALSE);
    }
  }
  if ($type == 'tourney_game') {
    foreach ($entities as $entity) {
      // Set the parent match on the game entity.
      $match = relation_get_related_entity('tourney_game', $entity->id, 'has_game');
      $entity->match = $match;
      $entity->contestants = is_object($match) && is_object($match->contestant1) 
        ? array(
          $match->contestant1->uid => $match->contestant1->name,
          $match->contestant2->uid => $match->contestant2->name,
        ) : array();
    }
  }
}



/**
 * Defines the entities and their  default bundles for the entities created by 
 * this module.
 */
function tourney_entities() {
  $types = &drupal_static(__FUNCTION__);
  
  if (empty($types)) {
    $types['tourney_tournament'] = (object) array(
      'type' => 'tournament',
      'name' => t('Tournament'),
      'description' => t('A tournament entity.'),
    );
    $types['tourney_match'] = (object) array(
      'type' => 'match',
      'name' => t('Match'),
      'description' => t('A match entity.'),
    );
    $types['tourney_game'] = (object) array(
      'type' => 'game',
      'name' => t('Game'),
      'description' => t('A game entity.'),
    );
  }
  return $types;
}


function tourney_uri($tourney) {
  return array(
    'path' => 'tourney/1',
  );
}

/**
 * Menu auto loaders.
 */
function tourney_tournament_type_load($type) {
  return tourney_tournament_type_get_types($type);
}
function tourney_match_type_load($type) {
  return tourney_match_type_get_types($type);
}
function tourney_game_type_load($type) {
  return tourney_game_type_get_types($type);
}

/**
 * Wrapper functions for the default entities #machine_name existing callback.
 */
function tourney_tournament_type_get_types($type_name = NULL) {
  return tourney_entity_get_types('tourney_tournament_type', $type_name);
}
function tourney_match_type_get_types($type_name = NULL) {
  return tourney_entity_get_types('tourney_match_type', $type_name);
}
function tourney_game_type_get_types($type_name = NULL) {
  return tourney_entity_get_types('tourney_game_type', $type_name);
}

/**
 * Gets an array of all types, keyed by the type name.
 *
 * @param $entity_name
 *   The name of the entity to look at.
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return 
 *   Depending whether $type isset, an array of types or a single one.
 */
function tourney_entity_get_types($entity_name, $type_name = NULL) {
  $types = entity_load_multiple_by_name($entity_name, isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Access callback for tourney module.
 */
function tourney_access() {
  return true;
}

/**
 * Fetch a tournament object
 * 
 * @param $id
 *   Integer specifying the tournament id
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded object of FALSE of it cannot be loaded.
 * 
 * @see tourney_tournament_load_multiple()
 */
function tourney_tournament_load($id = NULL, $reset = FALSE) {
  $ids = isset($id) ? array($id) : array();
  $conditions = array();
  $tournament = tourney_tournament_load_multiple($ids, $conditions, $reset);

  return $tournament ? reset($tournament) : FALSE;
}

/**
 * Load multiple tournament entities based on certain conditions.
 *
 * @param $ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of tournament entity objects, indexed by id.
 */
function tourney_tournament_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tourney_tournament', $ids, $conditions, $reset);
}

/**
 * Fetch a match object
 * 
 * @param $id
 *   Integer specifying the match id
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded object or FALSE of it cannot be loaded.
 * 
 * @see tourney_match_load_multiple()
 */
function tourney_match_load($id = NULL, $reset = FALSE) {
  $ids = isset($id) ? array($id) : array();
  $conditions = array();
  $match = tourney_match_load_multiple($ids, $conditions, $reset);

  return $match ? reset($match) : FALSE;
}

/**
 * Load multiple match entities based on certain conditions.
 *
 * @param $ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of match entity objects, indexed by id.
 */
function tourney_match_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tourney_match', $ids, $conditions, $reset);
}

/**
 * Fetch a game object
 * 
 * @param $id
 *   Integer specifying the match id
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded object or FALSE of it cannot be loaded.
 * 
 * @see tourney_match_load_multiple()
 */
function tourney_game_load($id = NULL, $reset = FALSE) {
  $ids = isset($id) ? array($id) : array();
  $conditions = array();
  $match = tourney_game_load_multiple($ids, $conditions, $reset);

  return $match ? reset($match) : FALSE;
}

/**
 * Load multiple game entities based on certain conditions.
 *
 * @param $ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of match entity objects, indexed by id.
 */
function tourney_game_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('tourney_game', $ids, $conditions, $reset);
}

/**
 * Delete multiple tournament entities.
 *
 * @param $ids
 *   An array of test entity IDs.
 */
function tourney_match_delete_multiple(array $ids) {
  entity_get_controller('tourney_match')->delete($ids);
}

/**
 * Implements hook_entity_insert().
 */
function tourney_entity_insert($entity, $entity_type) {
  if ($entity_type == 'tourney_tournament') {
    // Build a nested array of matches for the tournament being saved.
    $matches = new TourneyBuildMatches($entity->players, $entity->format);
    $matches->create();
    // Create the actual match entities and the first game.
    $matches->save($entity);
  }
}

/**
 * Save a tournament entity.
 */
function tourney_tournament_save(&$tourney) {
  entity_save('tourney_tournament', $tourney);  
}

/**
 * Save a match entity.
 */
function tourney_match_save(&$match) {
  entity_save('tourney_match', $match);
  // Save the relation for contestants if one exists.
  if (isset($match->contestant1) || isset($match->contestant2)) {
    // Check to see if the relation is already added.
    $user1 = relation_get_related_entity('tourney_match', $match->id, 'contestant_1');
    $user2 = relation_get_related_entity('tourney_match', $match->id, 'contestant_2');
    
    // Create the new relation.
    if (!is_object($user1) && $match->contestant1) {
      $entity_keys = array(
        array('entity_type' => 'tourney_match', 'entity_id' => $match->id),
        array('entity_type' => 'user', 'entity_id' => $match->contestant1),
      );
      $rid = relation_insert('contestant_1', $entity_keys);
    }
    
    if (!is_object($user2) && $match->contestant2) {
      $entity_keys = array(
        array('entity_type' => 'tourney_match', 'entity_id' => $match->id),
        array('entity_type' => 'user', 'entity_id' => $match->contestant2),
      );
      $rid = relation_insert('contestant_2', $entity_keys);
    }
  }
}

/**
 * Save a game entity.
 */
function tourney_game_save(&$game) {
  entity_save('tourney_game', $game);
  if (isset($game->match) && is_object($game->match)) {
    cache_clear_all('tourney_winner_count_'. $game->match->id, 'cache');
  }
}

/**
 * Fetch metadata for all tournament_type plugins.
 *
 * @return
 *   An array of arrays with information about all available tournament types.
 */
function tourney_get_types() {
  ctools_include('plugins');
  return ctools_get_plugins('tourney', 'tourney_formats');
}

/**
 * Build an options array to be used in forms.
 */
function tourney_get_type_options($reset = FALSE) {
  ctools_include('plugins');
  static $options = array();

  if (!empty($options) && !$reset) {
    return $options;
  }

  $plugins = tourney_get_types();
  uasort($plugins, 'ctools_plugin_sort');
  foreach ($plugins as $info) {
    $options[$info['builder controller']] = $info['name'];
  }
  return $options;
}

/**
 * Create a relation between two entities.
 * 
 * @param $predicate
 *   The relation type to save.
 * @param $source_entity
 *   The source entity.
 * @param $source_id
 *   The entity id of the source entity.
 * @param $destination_entity
 *   The destination entity.
 * @param $destination_id
 *   The entity id of the destination entity.
 */
function tourney_create_relation($predicate, $source_entity, $source_id, $destination_entity, $destination_id) {
  $entity_keys = array(
    array('entity_type' => $source_entity, 'entity_id' => $source_id),
    array('entity_type' => $destination_entity, 'entity_id' => $destination_id),
  );
  return relation_insert($predicate, $entity_keys);
}

/**
 * Implements hook_ctools_plugin_type().
 */
function tourney_ctools_plugin_type() {
  $plugins['tourney_formats'] = array(
    'load themes' => TRUE,
  );

  return $plugins;
}

function tourney_ctools_plugin_directory($module, $plugin) {
  if ($module == 'tourney' && $plugin == 'tourney_formats') {
    return 'plugins/tourney_formats';
  }
}
